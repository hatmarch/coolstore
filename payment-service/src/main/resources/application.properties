# Your application configuration properties go in here

# Outgoing stream
mp.messaging.outgoing.payments.connector=smallrye-kafka
mp.messaging.outgoing.payments.topic=payments
mp.messaging.outgoing.payments.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.payments.key.serializer=org.apache.kafka.common.serialization.StringSerializer

# Kafka properties for function running on cluster
mp.messaging.outgoing.payments.bootstrap.servers=my-cluster-kafka-bootstrap:9092
# Make the location explicit for CRW (quarkus profile)
# FIXME: kn-demo-dev is hardcoded as the kafka project
%crw.mp.messaging.outgoing.payments.bootstrap.servers=my-cluster-kafka-bootstrap.kn-demo-dev:9092
mp.messaging.outgoing.payments.security.protocol=PLAINTEXT
mp.messaging.outgoing.payments.ssl.truststore.location=""
mp.messaging.outgoing.payments.ssl.truststore.password=""

# FOR RUNNING IN "DEV MODE" (LOCALLY, e.g. mvn quarkus:dev)
%dev.mp.messaging.outgoing.payments.bootstrap.servers=my-cluster-kafka-bootstrap-kn-demo-dev.apps.cluster-4c7e4.4c7e.example.opentlc.com:443
%dev.mp.messaging.outgoing.payments.security.protocol=SSL
%dev.mp.messaging.outgoing.payments.ssl.truststore.location=/workspaces/serverless-demo/docker-secrets/truststore.jks
%dev.mp.messaging.outgoing.payments.ssl.truststore.password=password


# Incoming stream (unneeded when using Knative events)
mp.messaging.incoming.orders.connector=smallrye-kafka
mp.messaging.incoming.orders.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.orders.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.orders.bootstrap.servers=my-cluster-kafka-bootstrap:9092
# Make the location explicit for CRW (quarkus profile)
# FIXME: kn-demo-dev is hardcoded as the kafka project
%crw.mp.messaging.incoming.orders.bootstrap.servers=my-cluster-kafka-bootstrap.kn-demo-dev:9092
mp.messaging.incoming.orders.group.id=payment-order-service
mp.messaging.incoming.orders.auto.offset.reset=earliest
mp.messaging.incoming.orders.enable.auto.commit=true
mp.messaging.incoming.orders.request.timeout.ms=30000

%dev.mp.messaging.incoming.orders.bootstrap.servers=my-cluster-kafka-bootstrap-kn-demo-dev.apps.cluster-4c7e.4c7e.example.opentlc.com:443
%dev.mp.messaging.incoming.orders.security.protocol=SSL
%dev.mp.messaging.incoming.orders.ssl.truststore.location=/workspaces/serverless-demo/docker-secrets/truststore.jks
%dev.mp.messaging.incoming.orders.ssl.truststore.password=password